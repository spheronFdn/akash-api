// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/base/v1beta3/storage.proto

package v1beta3

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Storage stores resource quantity and storage attributes
type Storage struct {
	Name       string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Quantity   ResourceValue `protobuf:"bytes,2,opt,name=quantity,proto3" json:"size" yaml:"size"`
	Attributes Attributes    `protobuf:"bytes,3,rep,name=attributes,proto3,castrepeated=Attributes" json:"attributes,omitempty" yaml:"attributes,omitempty"`
}

func (m *Storage) Reset()         { *m = Storage{} }
func (m *Storage) String() string { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()    {}
func (*Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor_293fa891b98ded01, []int{0}
}
func (m *Storage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Storage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Storage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Storage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage.Merge(m, src)
}
func (m *Storage) XXX_Size() int {
	return m.Size()
}
func (m *Storage) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage.DiscardUnknown(m)
}

var xxx_messageInfo_Storage proto.InternalMessageInfo

func (m *Storage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Storage) GetQuantity() ResourceValue {
	if m != nil {
		return m.Quantity
	}
	return ResourceValue{}
}

func (m *Storage) GetAttributes() Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*Storage)(nil), "akash.base.v1beta3.Storage")
}

func init() { proto.RegisterFile("akash/base/v1beta3/storage.proto", fileDescriptor_293fa891b98ded01) }

var fileDescriptor_293fa891b98ded01 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x31, 0x4f, 0xf2, 0x40,
	0x18, 0xc7, 0x7b, 0x40, 0xde, 0x57, 0x8f, 0xad, 0x21, 0x91, 0x40, 0x6c, 0x6b, 0x07, 0x43, 0xa2,
	0xf4, 0x22, 0x6c, 0x6c, 0x76, 0x30, 0x71, 0xad, 0xc6, 0x81, 0xed, 0x0a, 0x67, 0x69, 0xa0, 0xbd,
	0x7a, 0x77, 0x25, 0xa9, 0x9f, 0xc0, 0xd1, 0x8f, 0x60, 0xe2, 0xe6, 0x27, 0x61, 0x64, 0x74, 0xaa,
	0x06, 0x16, 0xe3, 0xc8, 0x27, 0x30, 0x3d, 0x4a, 0x25, 0xb1, 0x5b, 0x9f, 0x3e, 0xbf, 0xfb, 0xfd,
	0x9f, 0x27, 0x0f, 0x34, 0xf0, 0x14, 0xf3, 0x09, 0x72, 0x31, 0x27, 0x68, 0x7e, 0xe1, 0x12, 0x81,
	0xfb, 0x88, 0x0b, 0xca, 0xb0, 0x47, 0xac, 0x88, 0x51, 0x41, 0x55, 0x55, 0x12, 0x56, 0x46, 0x58,
	0x39, 0xd1, 0x6a, 0x78, 0xd4, 0xa3, 0xb2, 0x8d, 0xb2, 0xaf, 0x2d, 0xd9, 0x32, 0x4b, 0x5c, 0x58,
	0x08, 0xe6, 0xbb, 0xb1, 0xc8, 0x6d, 0xad, 0xd3, 0x12, 0x86, 0x11, 0x4e, 0x63, 0x36, 0x22, 0x73,
	0x3c, 0x8b, 0x73, 0xce, 0x7c, 0xad, 0xc0, 0xff, 0x37, 0xdb, 0x39, 0xd4, 0x33, 0x58, 0x0b, 0x71,
	0x40, 0x9a, 0xc0, 0x00, 0x9d, 0x43, 0xfb, 0xe8, 0x3b, 0xd5, 0x65, 0xbd, 0x49, 0xf5, 0x7a, 0x82,
	0x83, 0xd9, 0xc0, 0xcc, 0x2a, 0xd3, 0x91, 0x3f, 0xd5, 0x21, 0x3c, 0x78, 0x88, 0x71, 0x28, 0x7c,
	0x91, 0x34, 0x2b, 0x06, 0xe8, 0xd4, 0x7b, 0x27, 0xd6, 0xdf, 0x0d, 0x2c, 0x27, 0xcf, 0xbc, 0xcb,
	0x32, 0xed, 0xf6, 0x22, 0xd5, 0x95, 0xcc, 0xcb, 0xfd, 0xc7, 0x3d, 0x6f, 0x56, 0x99, 0x4e, 0xe1,
	0x53, 0x9f, 0x00, 0x84, 0xc5, 0x42, 0xbc, 0x59, 0x35, 0xaa, 0x9d, 0x7a, 0xef, 0xb8, 0x4c, 0x7f,
	0xb9, 0xa3, 0xec, 0xeb, 0x5c, 0xdd, 0xf8, 0x7d, 0x78, 0x4e, 0x03, 0x5f, 0x90, 0x20, 0x12, 0xc9,
	0x26, 0xd5, 0xdb, 0xdb, 0xa8, 0xb2, 0xae, 0xf9, 0xf6, 0xa1, 0xc3, 0xc2, 0xc4, 0x9d, 0xbd, 0xec,
	0x41, 0xed, 0xeb, 0x45, 0x07, 0xf6, 0xed, 0x62, 0xa5, 0x81, 0xe5, 0x4a, 0x03, 0x9f, 0x2b, 0x0d,
	0x3c, 0xaf, 0x35, 0x65, 0xb9, 0xd6, 0x94, 0xf7, 0xb5, 0xa6, 0x0c, 0x07, 0x9e, 0x2f, 0x26, 0xb1,
	0x6b, 0x8d, 0x68, 0x80, 0x78, 0x34, 0x21, 0x8c, 0x86, 0x57, 0xe3, 0x10, 0xc9, 0x51, 0xbb, 0x38,
	0xf2, 0xbb, 0xf7, 0x94, 0x4d, 0x91, 0x47, 0x51, 0x48, 0xc7, 0x04, 0x89, 0x24, 0x22, 0x7c, 0x77,
	0x0f, 0xf7, 0x9f, 0x3c, 0x41, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x22, 0xc9, 0x16, 0xb5, 0x1c,
	0x02, 0x00, 0x00,
}

func (this *Storage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Storage)
	if !ok {
		that2, ok := that.(Storage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Quantity.Equal(&that1.Quantity) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(&that1.Attributes[i]) {
			return false
		}
	}
	return true
}
func (m *Storage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Storage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStorage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Quantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Storage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovStorage(uint64(l))
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func sovStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Storage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Storage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Storage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorage = fmt.Errorf("proto: unexpected end of group")
)
