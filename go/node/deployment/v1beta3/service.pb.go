// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/deployment/v1beta3/service.proto

package v1beta3

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("akash/deployment/v1beta3/service.proto", fileDescriptor_d88380ad17449a3c)
}

var fileDescriptor_d88380ad17449a3c = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd3, 0x31, 0x4f, 0xf2, 0x40,
	0x18, 0xc0, 0x71, 0xc8, 0x9b, 0x30, 0xdc, 0xf2, 0x62, 0x27, 0x73, 0xc3, 0x8d, 0xb2, 0xc0, 0x5d,
	0x14, 0x75, 0x35, 0x11, 0xa2, 0x13, 0x89, 0xd1, 0x38, 0xe8, 0x76, 0xd0, 0x87, 0xa3, 0x01, 0xfa,
	0x5c, 0xee, 0xae, 0x04, 0xe3, 0x97, 0xf0, 0x4b, 0xf8, 0x5d, 0x1c, 0x19, 0x1d, 0x0d, 0x7c, 0x11,
	0x63, 0xd5, 0x5e, 0x45, 0xa1, 0x74, 0x6d, 0x7f, 0x7d, 0xfe, 0xbd, 0xa6, 0x0f, 0x39, 0x90, 0x63,
	0x69, 0x47, 0x22, 0x04, 0x3d, 0xc1, 0x87, 0x29, 0xc4, 0x4e, 0xcc, 0x0e, 0xfb, 0xe0, 0x64, 0x5b,
	0x58, 0x30, 0xb3, 0x68, 0x00, 0x5c, 0x1b, 0x74, 0x18, 0xec, 0xa7, 0x8e, 0x7b, 0xc7, 0xbf, 0x1c,
	0x6d, 0x6e, 0x9c, 0xe0, 0x2f, 0x4d, 0xad, 0xfa, 0x9c, 0x43, 0x1b, 0x1b, 0xb5, 0x32, 0x98, 0xe8,
	0x0c, 0x1e, 0x3d, 0xd7, 0xc8, 0xbf, 0x9e, 0x55, 0xc1, 0x9c, 0xd4, 0x3b, 0x06, 0xa4, 0x83, 0x6e,
	0xf6, 0x48, 0xd0, 0xe2, 0x9b, 0xde, 0x86, 0xf7, 0xac, 0x5a, 0xe7, 0xf4, 0xa4, 0x14, 0xbf, 0x06,
	0xab, 0x31, 0xb6, 0x10, 0x3c, 0x92, 0xbd, 0x2e, 0x68, 0xb4, 0x91, 0xcb, 0xa5, 0xf9, 0xd6, 0x59,
	0xbf, 0x3c, 0x3d, 0x2d, 0xe7, 0xb3, 0xf8, 0x9c, 0xd4, 0x6f, 0x75, 0x58, 0xe6, 0xd8, 0xeb, 0xbc,
	0xe0, 0xd8, 0xeb, 0x3c, 0x2b, 0x27, 0xe4, 0x7f, 0x67, 0x82, 0x36, 0x1f, 0x6e, 0x6e, 0xff, 0x80,
	0x3f, 0x35, 0x3d, 0x2e, 0xa3, 0xb3, 0xec, 0x90, 0x90, 0xf4, 0xd6, 0xe5, 0xc7, 0x6f, 0x10, 0x34,
	0x8a, 0x67, 0xa4, 0x90, 0x8a, 0x1d, 0x61, 0xbe, 0x73, 0x25, 0x93, 0xdd, 0x3a, 0x1e, 0x16, 0x74,
	0x3c, 0xcc, 0x77, 0x6e, 0x9c, 0x34, 0x6e, 0x97, 0x8e, 0x87, 0x05, 0x1d, 0x0f, 0xbf, 0x3b, 0xe7,
	0x77, 0x2f, 0x4b, 0x56, 0x5d, 0x2c, 0x59, 0xf5, 0x6d, 0xc9, 0xaa, 0x4f, 0x2b, 0x56, 0x59, 0xac,
	0x58, 0xe5, 0x75, 0xc5, 0x2a, 0xf7, 0x67, 0x2a, 0x72, 0xa3, 0xa4, 0xcf, 0x07, 0x38, 0x15, 0x56,
	0x8f, 0xc0, 0x60, 0x7c, 0x11, 0xc6, 0x22, 0x9d, 0xdf, 0x92, 0x3a, 0x6a, 0x0d, 0xd1, 0x8c, 0x85,
	0x42, 0x11, 0x63, 0x08, 0x7f, 0x6c, 0x64, 0xbf, 0x96, 0x6e, 0x62, 0xfb, 0x3d, 0x00, 0x00, 0xff,
	0xff, 0xbb, 0x13, 0xa1, 0x76, 0x24, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateDeployment defines a method to create new deployment given proper inputs.
	CreateDeployment(ctx context.Context, in *MsgCreateDeployment, opts ...grpc.CallOption) (*MsgCreateDeploymentResponse, error)
	// DepositDeployment deposits more funds into the deployment account
	DepositDeployment(ctx context.Context, in *MsgDepositDeployment, opts ...grpc.CallOption) (*MsgDepositDeploymentResponse, error)
	// UpdateDeployment defines a method to update a deployment given proper inputs.
	UpdateDeployment(ctx context.Context, in *MsgUpdateDeployment, opts ...grpc.CallOption) (*MsgUpdateDeploymentResponse, error)
	// CloseDeployment defines a method to close a deployment given proper inputs.
	CloseDeployment(ctx context.Context, in *MsgCloseDeployment, opts ...grpc.CallOption) (*MsgCloseDeploymentResponse, error)
	// CloseGroup defines a method to close a group of a deployment given proper inputs.
	CloseGroup(ctx context.Context, in *MsgCloseGroup, opts ...grpc.CallOption) (*MsgCloseGroupResponse, error)
	// PauseGroup defines a method to close a group of a deployment given proper inputs.
	PauseGroup(ctx context.Context, in *MsgPauseGroup, opts ...grpc.CallOption) (*MsgPauseGroupResponse, error)
	// StartGroup defines a method to close a group of a deployment given proper inputs.
	StartGroup(ctx context.Context, in *MsgStartGroup, opts ...grpc.CallOption) (*MsgStartGroupResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDeployment(ctx context.Context, in *MsgCreateDeployment, opts ...grpc.CallOption) (*MsgCreateDeploymentResponse, error) {
	out := new(MsgCreateDeploymentResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta3.Msg/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositDeployment(ctx context.Context, in *MsgDepositDeployment, opts ...grpc.CallOption) (*MsgDepositDeploymentResponse, error) {
	out := new(MsgDepositDeploymentResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta3.Msg/DepositDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDeployment(ctx context.Context, in *MsgUpdateDeployment, opts ...grpc.CallOption) (*MsgUpdateDeploymentResponse, error) {
	out := new(MsgUpdateDeploymentResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta3.Msg/UpdateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseDeployment(ctx context.Context, in *MsgCloseDeployment, opts ...grpc.CallOption) (*MsgCloseDeploymentResponse, error) {
	out := new(MsgCloseDeploymentResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta3.Msg/CloseDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseGroup(ctx context.Context, in *MsgCloseGroup, opts ...grpc.CallOption) (*MsgCloseGroupResponse, error) {
	out := new(MsgCloseGroupResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta3.Msg/CloseGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseGroup(ctx context.Context, in *MsgPauseGroup, opts ...grpc.CallOption) (*MsgPauseGroupResponse, error) {
	out := new(MsgPauseGroupResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta3.Msg/PauseGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartGroup(ctx context.Context, in *MsgStartGroup, opts ...grpc.CallOption) (*MsgStartGroupResponse, error) {
	out := new(MsgStartGroupResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta3.Msg/StartGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateDeployment defines a method to create new deployment given proper inputs.
	CreateDeployment(context.Context, *MsgCreateDeployment) (*MsgCreateDeploymentResponse, error)
	// DepositDeployment deposits more funds into the deployment account
	DepositDeployment(context.Context, *MsgDepositDeployment) (*MsgDepositDeploymentResponse, error)
	// UpdateDeployment defines a method to update a deployment given proper inputs.
	UpdateDeployment(context.Context, *MsgUpdateDeployment) (*MsgUpdateDeploymentResponse, error)
	// CloseDeployment defines a method to close a deployment given proper inputs.
	CloseDeployment(context.Context, *MsgCloseDeployment) (*MsgCloseDeploymentResponse, error)
	// CloseGroup defines a method to close a group of a deployment given proper inputs.
	CloseGroup(context.Context, *MsgCloseGroup) (*MsgCloseGroupResponse, error)
	// PauseGroup defines a method to close a group of a deployment given proper inputs.
	PauseGroup(context.Context, *MsgPauseGroup) (*MsgPauseGroupResponse, error)
	// StartGroup defines a method to close a group of a deployment given proper inputs.
	StartGroup(context.Context, *MsgStartGroup) (*MsgStartGroupResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateDeployment(ctx context.Context, req *MsgCreateDeployment) (*MsgCreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (*UnimplementedMsgServer) DepositDeployment(ctx context.Context, req *MsgDepositDeployment) (*MsgDepositDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositDeployment not implemented")
}
func (*UnimplementedMsgServer) UpdateDeployment(ctx context.Context, req *MsgUpdateDeployment) (*MsgUpdateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (*UnimplementedMsgServer) CloseDeployment(ctx context.Context, req *MsgCloseDeployment) (*MsgCloseDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseDeployment not implemented")
}
func (*UnimplementedMsgServer) CloseGroup(ctx context.Context, req *MsgCloseGroup) (*MsgCloseGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseGroup not implemented")
}
func (*UnimplementedMsgServer) PauseGroup(ctx context.Context, req *MsgPauseGroup) (*MsgPauseGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseGroup not implemented")
}
func (*UnimplementedMsgServer) StartGroup(ctx context.Context, req *MsgStartGroup) (*MsgStartGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGroup not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta3.Msg/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDeployment(ctx, req.(*MsgCreateDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta3.Msg/DepositDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositDeployment(ctx, req.(*MsgDepositDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta3.Msg/UpdateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDeployment(ctx, req.(*MsgUpdateDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta3.Msg/CloseDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseDeployment(ctx, req.(*MsgCloseDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta3.Msg/CloseGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseGroup(ctx, req.(*MsgCloseGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta3.Msg/PauseGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseGroup(ctx, req.(*MsgPauseGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta3.Msg/StartGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartGroup(ctx, req.(*MsgStartGroup))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "akash.deployment.v1beta3.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _Msg_CreateDeployment_Handler,
		},
		{
			MethodName: "DepositDeployment",
			Handler:    _Msg_DepositDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _Msg_UpdateDeployment_Handler,
		},
		{
			MethodName: "CloseDeployment",
			Handler:    _Msg_CloseDeployment_Handler,
		},
		{
			MethodName: "CloseGroup",
			Handler:    _Msg_CloseGroup_Handler,
		},
		{
			MethodName: "PauseGroup",
			Handler:    _Msg_PauseGroup_Handler,
		},
		{
			MethodName: "StartGroup",
			Handler:    _Msg_StartGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "akash/deployment/v1beta3/service.proto",
}
