// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/inventory/v1/node.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NodeCapabilities extended list of node capabilities
type NodeCapabilities struct {
	StorageClasses []string `protobuf:"bytes,1,rep,name=storage_classes,json=storageClasses,proto3" json:"storage_classes" yaml:"storage_classes"`
}

func (m *NodeCapabilities) Reset()         { *m = NodeCapabilities{} }
func (m *NodeCapabilities) String() string { return proto.CompactTextString(m) }
func (*NodeCapabilities) ProtoMessage()    {}
func (*NodeCapabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f97c0fb35079221, []int{0}
}
func (m *NodeCapabilities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeCapabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeCapabilities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeCapabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeCapabilities.Merge(m, src)
}
func (m *NodeCapabilities) XXX_Size() int {
	return m.Size()
}
func (m *NodeCapabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeCapabilities.DiscardUnknown(m)
}

var xxx_messageInfo_NodeCapabilities proto.InternalMessageInfo

func (m *NodeCapabilities) GetStorageClasses() []string {
	if m != nil {
		return m.StorageClasses
	}
	return nil
}

// Node reports node inventory details
type Node struct {
	Name                string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Resources           NodeResources    `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources" yaml:"resources"`
	Capabilities        NodeCapabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities" yaml:"capabilities"`
	CudaVersion         string           `protobuf:"bytes,4,opt,name=cuda_version,json=cudaVersion,proto3" json:"cuda_version" yaml:"cuda_version"`
	NvidiaDriverVersion string           `protobuf:"bytes,5,opt,name=nvidia_driver_version,json=nvidiaDriverVersion,proto3" json:"nvidia_driver_version" yaml:"nvidia_driver_version"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f97c0fb35079221, []int{1}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetResources() NodeResources {
	if m != nil {
		return m.Resources
	}
	return NodeResources{}
}

func (m *Node) GetCapabilities() NodeCapabilities {
	if m != nil {
		return m.Capabilities
	}
	return NodeCapabilities{}
}

func (m *Node) GetCudaVersion() string {
	if m != nil {
		return m.CudaVersion
	}
	return ""
}

func (m *Node) GetNvidiaDriverVersion() string {
	if m != nil {
		return m.NvidiaDriverVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeCapabilities)(nil), "akash.inventory.v1.NodeCapabilities")
	proto.RegisterType((*Node)(nil), "akash.inventory.v1.Node")
}

func init() { proto.RegisterFile("akash/inventory/v1/node.proto", fileDescriptor_5f97c0fb35079221) }

var fileDescriptor_5f97c0fb35079221 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x1c, 0xc5, 0x73, 0xd4, 0x20, 0xe5, 0x12, 0x95, 0xca, 0x01, 0x64, 0x55, 0xe0, 0x0b, 0x27, 0x86,
	0x2c, 0xb5, 0xd5, 0x96, 0xa9, 0x0c, 0x48, 0x0e, 0x62, 0xcc, 0x60, 0x10, 0x03, 0x12, 0x8a, 0x2e,
	0xf6, 0xe1, 0x9c, 0x9a, 0xdc, 0x45, 0x77, 0x8e, 0xa5, 0x4a, 0xac, 0x48, 0x8c, 0x7c, 0x06, 0x3e,
	0x4d, 0xc6, 0x8e, 0x4c, 0x27, 0xe4, 0x6c, 0x19, 0xfd, 0x09, 0x50, 0xce, 0xc1, 0xb1, 0xdb, 0xb0,
	0xd9, 0xef, 0xbd, 0xff, 0xfb, 0xd9, 0xff, 0xb3, 0xe1, 0x0b, 0x72, 0x4d, 0xd4, 0xd4, 0x67, 0x3c,
	0xa3, 0x3c, 0x15, 0xf2, 0xc6, 0xcf, 0xce, 0x7d, 0x2e, 0x62, 0xea, 0x2d, 0xa4, 0x48, 0x85, 0x6d,
	0x1b, 0xdb, 0xab, 0x6c, 0x2f, 0x3b, 0x3f, 0x7d, 0x92, 0x88, 0x44, 0x18, 0xdb, 0xdf, 0x5e, 0x95,
	0xc9, 0x53, 0x7c, 0xa0, 0x48, 0x52, 0x25, 0x96, 0x32, 0xa2, 0xaa, 0xcc, 0xe0, 0x6f, 0xf0, 0x64,
	0x24, 0x62, 0x3a, 0x24, 0x0b, 0x32, 0x61, 0x33, 0x96, 0x32, 0xaa, 0xec, 0x29, 0x7c, 0xac, 0x52,
	0x21, 0x49, 0x42, 0xc7, 0xd1, 0x8c, 0x28, 0x45, 0x95, 0x03, 0xfa, 0x47, 0x83, 0x76, 0xf0, 0x36,
	0xd7, 0xe8, 0xf8, 0x43, 0x69, 0x0d, 0x4b, 0x67, 0xa3, 0xd1, 0xdd, 0x70, 0xa1, 0xd1, 0xb3, 0x1b,
	0x32, 0x9f, 0x5d, 0xe1, 0x3b, 0x06, 0x0e, 0x8f, 0x55, 0x63, 0x18, 0xff, 0xb2, 0xa0, 0xb5, 0xc5,
	0xdb, 0x97, 0xd0, 0xe2, 0x64, 0x4e, 0x1d, 0xd0, 0x07, 0x83, 0x76, 0x80, 0x72, 0x8d, 0xac, 0x11,
	0x99, 0xd3, 0x8d, 0x46, 0x46, 0x2f, 0x34, 0xea, 0x94, 0x95, 0xdb, 0x3b, 0x1c, 0x1a, 0xd1, 0x56,
	0xb0, 0x5d, 0xbd, 0x8e, 0xf3, 0xa0, 0x0f, 0x06, 0x9d, 0x8b, 0x97, 0xde, 0xfd, 0xed, 0x78, 0x5b,
	0x42, 0xf8, 0x2f, 0x18, 0x5c, 0xac, 0x34, 0x6a, 0xe5, 0x1a, 0xb5, 0x2b, 0x69, 0xa3, 0xd1, 0xbe,
	0xa8, 0xd0, 0xe8, 0xa4, 0x44, 0x55, 0x12, 0x0e, 0xf7, 0xb6, 0xfd, 0x1d, 0xc0, 0x6e, 0x54, 0xdb,
	0x96, 0x73, 0x64, 0xc0, 0xaf, 0xfe, 0x07, 0xae, 0x6f, 0x36, 0x78, 0xb3, 0x63, 0x77, 0xeb, 0xea,
	0x46, 0xa3, 0x46, 0x63, 0xa1, 0x51, 0xaf, 0x7c, 0x82, 0xba, 0x8a, 0xc3, 0x46, 0xc8, 0xfe, 0x02,
	0xbb, 0xd1, 0x32, 0x26, 0xe3, 0x8c, 0x4a, 0xc5, 0x04, 0x77, 0x2c, 0xb3, 0xb9, 0xab, 0x95, 0x46,
	0x20, 0xd7, 0xa8, 0x33, 0x5c, 0xc6, 0xe4, 0x53, 0x69, 0x99, 0xfe, 0x5a, 0xb4, 0xd6, 0x5f, 0x53,
	0x71, 0xd8, 0x89, 0xf6, 0x33, 0xf6, 0x0f, 0x00, 0x9f, 0xf2, 0x8c, 0xc5, 0x8c, 0x8c, 0x63, 0xc9,
	0x32, 0x2a, 0x2b, 0xd0, 0x43, 0x03, 0xfa, 0xb8, 0x03, 0xf5, 0x46, 0x26, 0xf4, 0xce, 0x64, 0xf6,
	0xc0, 0xc3, 0xb3, 0x85, 0x46, 0xcf, 0x77, 0xc7, 0x78, 0xc8, 0xc6, 0x61, 0x8f, 0xdf, 0x6f, 0x0b,
	0x46, 0xab, 0xdc, 0x05, 0xb7, 0xb9, 0x0b, 0xfe, 0xe4, 0x2e, 0xf8, 0xb9, 0x76, 0x5b, 0xb7, 0x6b,
	0xb7, 0xf5, 0x7b, 0xed, 0xb6, 0x3e, 0xbf, 0x4e, 0x58, 0x3a, 0x5d, 0x4e, 0xbc, 0x48, 0xcc, 0x7d,
	0xb5, 0x98, 0x52, 0x29, 0xf8, 0xfb, 0x98, 0xfb, 0xe6, 0x24, 0xce, 0xc8, 0x82, 0x9d, 0x7d, 0x15,
	0xf2, 0xda, 0x4f, 0x44, 0xe3, 0x17, 0x98, 0x3c, 0x32, 0x5f, 0xfe, 0xe5, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x62, 0x4d, 0xb3, 0x03, 0x68, 0x03, 0x00, 0x00,
}

func (m *NodeCapabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCapabilities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeCapabilities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageClasses) > 0 {
		for iNdEx := len(m.StorageClasses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StorageClasses[iNdEx])
			copy(dAtA[i:], m.StorageClasses[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.StorageClasses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NvidiaDriverVersion) > 0 {
		i -= len(m.NvidiaDriverVersion)
		copy(dAtA[i:], m.NvidiaDriverVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.NvidiaDriverVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CudaVersion) > 0 {
		i -= len(m.CudaVersion)
		copy(dAtA[i:], m.CudaVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.CudaVersion)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Capabilities.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeCapabilities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StorageClasses) > 0 {
		for _, s := range m.StorageClasses {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = m.Resources.Size()
	n += 1 + l + sovNode(uint64(l))
	l = m.Capabilities.Size()
	n += 1 + l + sovNode(uint64(l))
	l = len(m.CudaVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.NvidiaDriverVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeCapabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCapabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCapabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClasses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageClasses = append(m.StorageClasses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CudaVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CudaVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NvidiaDriverVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NvidiaDriverVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
