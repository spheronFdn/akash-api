// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/inventory/v1/blacklistinfo.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BlacklistInfo reports reasons a node might be blacklisted from the network
type BlacklistInfo struct {
	SecurityViolationsCount         int32 `protobuf:"varint,1,opt,name=security_violations_count,json=securityViolationsCount,proto3" json:"security_violations_count" yaml:"security_violations_count"`
	ResourceRequirementsUnfulfilled bool  `protobuf:"varint,2,opt,name=resource_requirements_unfulfilled,json=resourceRequirementsUnfulfilled,proto3" json:"resource_requirements_unfulfilled" yaml:"resource_requirements_unfulfilled"`
	DeploymentsClosedWhileOffline   int32 `protobuf:"varint,3,opt,name=deployments_closed_while_offline,json=deploymentsClosedWhileOffline,proto3" json:"deployments_closed_while_offline" yaml:"deployments_closed_while_offline"`
}

func (m *BlacklistInfo) Reset()         { *m = BlacklistInfo{} }
func (m *BlacklistInfo) String() string { return proto.CompactTextString(m) }
func (*BlacklistInfo) ProtoMessage()    {}
func (*BlacklistInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e44ac8a9a20f1bba, []int{0}
}
func (m *BlacklistInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlacklistInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlacklistInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlacklistInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlacklistInfo.Merge(m, src)
}
func (m *BlacklistInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlacklistInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlacklistInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlacklistInfo proto.InternalMessageInfo

func (m *BlacklistInfo) GetSecurityViolationsCount() int32 {
	if m != nil {
		return m.SecurityViolationsCount
	}
	return 0
}

func (m *BlacklistInfo) GetResourceRequirementsUnfulfilled() bool {
	if m != nil {
		return m.ResourceRequirementsUnfulfilled
	}
	return false
}

func (m *BlacklistInfo) GetDeploymentsClosedWhileOffline() int32 {
	if m != nil {
		return m.DeploymentsClosedWhileOffline
	}
	return 0
}

func init() {
	proto.RegisterType((*BlacklistInfo)(nil), "akash.inventory.v1.BlacklistInfo")
}

func init() {
	proto.RegisterFile("akash/inventory/v1/blacklistinfo.proto", fileDescriptor_e44ac8a9a20f1bba)
}

var fileDescriptor_e44ac8a9a20f1bba = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd2, 0x3f, 0xeb, 0xd3, 0x40,
	0x18, 0x07, 0xf0, 0x9e, 0xff, 0x90, 0x80, 0x4b, 0x10, 0x5a, 0x85, 0xe6, 0x62, 0x06, 0xed, 0xd2,
	0x84, 0xa2, 0x93, 0x63, 0x2a, 0x82, 0x8b, 0x42, 0x44, 0x05, 0x11, 0x42, 0x9a, 0x5c, 0x92, 0xa3,
	0xd7, 0x7b, 0xe2, 0xdd, 0x25, 0x92, 0x77, 0xe1, 0xe8, 0x5b, 0xf0, 0x25, 0xb8, 0x39, 0x3a, 0x76,
	0x74, 0x3a, 0x24, 0xdd, 0x3a, 0xf6, 0x15, 0x48, 0x93, 0xda, 0xfa, 0x83, 0x5f, 0x9b, 0x2d, 0x90,
	0xcf, 0xf3, 0x7d, 0x1e, 0x8e, 0xaf, 0xf1, 0x38, 0x5a, 0x46, 0x32, 0xf7, 0x28, 0xaf, 0x08, 0x57,
	0x20, 0x6a, 0xaf, 0x9a, 0x79, 0x0b, 0x16, 0xc5, 0x4b, 0x46, 0xa5, 0xa2, 0x3c, 0x05, 0xb7, 0x10,
	0xa0, 0xc0, 0x34, 0x5b, 0xe7, 0x1e, 0x9d, 0x5b, 0xcd, 0x1e, 0xde, 0xcf, 0x20, 0x83, 0xf6, 0xb7,
	0xb7, 0xff, 0xea, 0xa4, 0xf3, 0xfd, 0x96, 0x71, 0xcf, 0xff, 0x97, 0xf0, 0x8a, 0xa7, 0x60, 0x7e,
	0x43, 0xc6, 0x03, 0x49, 0xe2, 0x52, 0x50, 0x55, 0x87, 0x15, 0x05, 0x16, 0x29, 0x0a, 0x5c, 0x86,
	0x31, 0x94, 0x5c, 0x8d, 0x90, 0x8d, 0x26, 0xb7, 0xfd, 0x4f, 0x8d, 0xc6, 0xc3, 0xb7, 0x07, 0xf4,
	0xfe, 0x68, 0xe6, 0x7b, 0xb2, 0xd5, 0xf8, 0xfc, 0xfc, 0x4e, 0x63, 0xbb, 0x8e, 0x56, 0xec, 0xb9,
	0x73, 0x96, 0x38, 0xc1, 0x50, 0x5e, 0x9f, 0x6c, 0xfe, 0x44, 0xc6, 0x23, 0x41, 0x24, 0x94, 0x22,
	0x26, 0xa1, 0x20, 0x9f, 0x4b, 0x2a, 0xc8, 0x8a, 0x70, 0x25, 0xc3, 0x92, 0xa7, 0x25, 0x4b, 0x29,
	0x63, 0x24, 0x19, 0xdd, 0xb0, 0xd1, 0xe4, 0xae, 0xaf, 0x1a, 0x8d, 0x71, 0x70, 0xc0, 0xc1, 0x7f,
	0xf6, 0xdd, 0x89, 0x6e, 0x35, 0xee, 0xcf, 0xdb, 0x69, 0x3c, 0xe9, 0x4e, 0xee, 0xa5, 0x4e, 0x80,
	0xc5, 0xe5, 0x8d, 0xe6, 0x0f, 0x64, 0xd8, 0x09, 0x29, 0x18, 0xd4, 0xdd, 0x74, 0xcc, 0x40, 0x92,
	0x24, 0xfc, 0x92, 0x53, 0x46, 0x42, 0x48, 0x53, 0x46, 0x39, 0x19, 0xdd, 0x6c, 0x1f, 0xb9, 0x68,
	0x34, 0x1e, 0xbf, 0x38, 0xd9, 0x79, 0x4b, 0x3f, 0xec, 0xe5, 0x9b, 0x0e, 0x6e, 0x35, 0xee, 0x0d,
	0xdb, 0x69, 0xfc, 0xa4, 0x3b, 0xbf, 0x4f, 0x3a, 0xc1, 0x38, 0xb9, 0xb4, 0xcd, 0x7f, 0xfd, 0xab,
	0xb1, 0xd0, 0xba, 0xb1, 0xd0, 0x9f, 0xc6, 0x42, 0x5f, 0x37, 0xd6, 0x60, 0xbd, 0xb1, 0x06, 0xbf,
	0x37, 0xd6, 0xe0, 0xe3, 0xb3, 0x8c, 0xaa, 0xbc, 0x5c, 0xb8, 0x31, 0xac, 0x3c, 0x59, 0xe4, 0x44,
	0x00, 0x7f, 0x99, 0x70, 0xaf, 0x6d, 0xe1, 0x34, 0x2a, 0xe8, 0x34, 0x05, 0xb1, 0xf4, 0x32, 0xb8,
	0xd2, 0xdc, 0xc5, 0x9d, 0xb6, 0x82, 0x4f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x26, 0x97,
	0x89, 0xd6, 0x02, 0x00, 0x00,
}

func (m *BlacklistInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacklistInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlacklistInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeploymentsClosedWhileOffline != 0 {
		i = encodeVarintBlacklistinfo(dAtA, i, uint64(m.DeploymentsClosedWhileOffline))
		i--
		dAtA[i] = 0x18
	}
	if m.ResourceRequirementsUnfulfilled {
		i--
		if m.ResourceRequirementsUnfulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SecurityViolationsCount != 0 {
		i = encodeVarintBlacklistinfo(dAtA, i, uint64(m.SecurityViolationsCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlacklistinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlacklistinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlacklistInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecurityViolationsCount != 0 {
		n += 1 + sovBlacklistinfo(uint64(m.SecurityViolationsCount))
	}
	if m.ResourceRequirementsUnfulfilled {
		n += 2
	}
	if m.DeploymentsClosedWhileOffline != 0 {
		n += 1 + sovBlacklistinfo(uint64(m.DeploymentsClosedWhileOffline))
	}
	return n
}

func sovBlacklistinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlacklistinfo(x uint64) (n int) {
	return sovBlacklistinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlacklistInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlacklistinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacklistInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacklistInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityViolationsCount", wireType)
			}
			m.SecurityViolationsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlacklistinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityViolationsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceRequirementsUnfulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlacklistinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResourceRequirementsUnfulfilled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentsClosedWhileOffline", wireType)
			}
			m.DeploymentsClosedWhileOffline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlacklistinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeploymentsClosedWhileOffline |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlacklistinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlacklistinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlacklistinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlacklistinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlacklistinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlacklistinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlacklistinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlacklistinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlacklistinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlacklistinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlacklistinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlacklistinfo = fmt.Errorf("proto: unexpected end of group")
)
